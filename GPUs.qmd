# Faster Solves with GPUs

---

## Two ways to use GPUs

* GPU within problem (PDEs)
* GPU ensembles

---

## Within GPU paralellization

* Many staates (>1000)
* Expensive `f`
* fairly simple `f` (array based paralellism)


---

## Within GPU example

```{julia}
#| echo: true
#| output: false

using DiffEqGPU, OrdinaryDiffEq, CUDA
function linear_ode(du, u, p, t)
    mul!(du, p, u)
end

A = CUDA.rand(Float32, 1000, 1000)
u0 = CUDA.rand(Float32, 1000)
prob = ODEProblem(linear_ode, u0, (0f0, 100f0), A)
solve(prob)
```

---

## DiffEqGPU.jl

* `EnsembleGPUArray`
* `EnsembleGPUKernel`

---

## EnsembleGPUArray

* Easy
* Higher overhead

```{julia}
#| echo: true
#| output: false

using DiffEqGPU, OrdinaryDiffEq, CUDA
function lorenz(du, u, p, t)
    du[1] = p[1] * (u[2] - u[1])
    du[2] = u[1] * (p[2] - u[3]) - u[2]
    du[3] = u[1] * u[2] - p[3] * u[3]
end

u0 = Float32[1.0; 0.0; 0.0]
tspan = (0.0f0, 100.0f0)
p = [10.0f0, 28.0f0, 8 / 3.0f0]
prob = ODEProblem(lorenz, u0, tspan, p)
prob_func = (prob, i, repeat) -> remake(prob, p = rand(Float32, 3) .* p)
monteprob = EnsembleProblem(prob, prob_func = prob_func, safetycopy = false)
@time solve(monteprob, Tsit5(), EnsembleGPUArray(CUDA.CUDABackend()), trajectories = 10_000, saveat = 1.0f0);
```

```{julia}
@time solve(monteprob, Tsit5(), EnsembleGPUArray(CUDA.CUDABackend()), trajectories = 10_000, saveat = 1.0f0);
```

---

## EnsembleGPUKernel

* Runs entire solver on the GPU
* Faster
* Slightly trickier to set up
* Fewer supported solvers

```{julia}
#| echo: true
#| output: false
using StaticArrays

function lorenz2(u, p, t)
    du1 = p[1] * (u[2] - u[1])
    du2 = u[1] * (p[2] - u[3]) - u[2]
    du3 = u[1] * u[2] - p[3] * u[3]
    return SVector{3}(du1, du2, du3)
end

u0 = @SVector [1.0f0; 0.0f0; 0.0f0]
tspan = (0.0f0, 10.0f0)
p = @SVector [10.0f0, 28.0f0, 8 / 3.0f0]
prob = ODEProblem{false}(lorenz2, u0, tspan, p)
prob_func = (prob, i, repeat) -> remake(prob, p = (@SVector rand(Float32, 3)) .* p)
monteprob = EnsembleProblem(prob, prob_func = prob_func, safetycopy = false)
@time solve(monteprob, GPUTsit5(), EnsembleGPUKernel(CUDA.CUDABackend()),
    trajectories = 10_000, saveat = 1.0f0)
```
```{julia}
@time solve(monteprob, GPUTsit5(), EnsembleGPUKernel(CUDA.CUDABackend()),
    trajectories = 10_000, saveat = 1.0f0);
```

---

## GPU Performance (Lorentz)

![GPU Performance](GPU_perf.png)

---

## Downsides of GPUs

* Function calls very slow
* Branches can reduce throughput
* Less solid (especially on non-Nvidia)


---

## GPU Performance profile

* Lots of paralelism necessary
* `Float64` is the enemy. Use `Float32` wherever possible
* Minimize data transfer
* Be careful with scalar indexing
* Potentially must faster than CPUs

<!-- Local Variables: -->
<!-- mode: markdown -->
<!-- End: -->
