# Partial Differential Equations

---

## Overview of (some) PDE tools

Check out [github.com/JuliaPDE/SurveyofPDEPackages](URL github.com/JuliaPDE/SurveyofPDEPackages)

---


## Finite Differences

* SciMLOperators.jl
* MethodOfLines.jl
* ParallelStencil.jl
* ImplicitGlobalGrid.jl

---

## Finite Elements

* Ferrite.jl
* Gridap.jl
* FEniCS.jl
* Trixi.jl

---

## Finite Volumes

* VoronoiFVM.jl
* [Oceananigans.jl](URL https://www.youtube.com/watch?v=kpUrxnKKMjI)

---

## Brusselator
$$
\begin{align}
\frac{\partial U}{\partial t} &= 1 + U^2V - 4.4U + A\nabla^2U + f(x,y,t)\\
\frac{\partial V}{\partial t} &= 3.4U -U^2V - \alpha\nabla^2V \\
U(x, y, 0) &= 22\cdot (y(1-y))^{3/2} \\
V(x, y, 0) &= 27\cdot (x(1-x))^{3/2} \\
U(x+1,y,t) &= U(x,y,t) \\
V(x,y+1,t) &= V(x,y,t)
\end{align}
$$

```{julia}
#| echo: true
#| output: false
function f(x,y,t)
    ifelse(t < 1.1 || (x-0.3)^2+(y-0.6)^2 > 0.1^2 , 0, 5)
end
```

---

## Brusselator in Julia

```{julia}
#| echo: true
#| output: false

using OrdinaryDiffEq, LinearAlgebra, SparseArrays
const N = 32
const xyd_brusselator = range(0, stop = 1, length = N)
brusselator_f(x, y, t) = (((x - 0.3)^2 + (y - 0.6)^2) <= 0.1^2) * (t >= 1.1) * 5.0
function brusselator_loop(du, u, p, t)
    A, B, alpha, dx = p
    alpha /= dx^2
    @inbounds for i in 1:N, j in 1:N
        x, y = xyd_brusselator[i], xyd_brusselator[j]
        ip1, im1, jp1, jm1 = clamp.((i + 1, i - 1, j + 1, j - 1), 1, N)
        du[i, j, 1] = alpha * (u[im1, j,   1] + u[ip1, j,   1]
                             + u[i,   jp1, 1] + u[i,   jm1, 1]
                             -4u[i,   j,   1]) +
                      B + u[i, j, 1]^2 * u[i, j, 2] - (A + 1) * u[i, j, 1] +
                      brusselator_f(x, y, t)
        du[i, j, 2] = alpha * (u[im1, j,   2] + u[ip1, j,   2]
                             + u[i,   jp1, 2] + u[i,   jm1, 2]
                             -4u[i,   j,   2]) +
                      A * u[i, j, 1] - u[i, j, 1]^2 * u[i, j, 2]
    end
end
```

## Brusselator in Julia (cont)

```{julia}
#| echo: true
#| output: false

p = (3.4, 1.0, 10.0, step(xyd_brusselator))
function init_brusselator(xyd)
    u = zeros(N, N, 2)
    for i in 1:N, j in 1:N
        x, y = xyd[i], xyd[j]
        u[i, j, 1] = 22 * (y * (1 - y))^(3 / 2)
        u[i, j, 2] = 27 * (x * (1 - x))^(3 / 2)
    end
    u
end
u0 = init_brusselator(xyd_brusselator)
brusselator = ODEProblem(brusselator_loop, u0, (0.0, 11.5), p)
```

---

## Out of the box performance
```{julia}
#| output: false
solve(brusselator) #compile
solve(brusselator, DefaultODEAlgorithm()) #compile
```
```{julia}
#| echo: true
@time solve(brusselator);
@time solve(brusselator, DefaultODEAlgorithm());
```
---

## Sparse Jacobian
```{julia}
#| echo: true
#| output: false
using SparseConnectivityTracer, ADTypes
detector = TracerSparsityDetector()
du0 = copy(u0)
jac_sparsity = ADTypes.jacobian_sparsity(
    (du, u) -> brusselator_loop(du, u, p, 0.0), 
    du0, 
    u0, 
    detector)
brusselator_f_sparse = ODEFunction(brusselator_loop;
    jac_prototype = float.(jac_sparsity))
brusselator_sparse = ODEProblem(brusselator_f_sparse, u0, (0.0, 11.5), p)
@time solve(brusselator_sparse, DefaultODEAlgorithm())
```
```{julia}
@time solve(brusselator_sparse, DefaultODEAlgorithm());
```

---

## Specialized Linear Solvers

```{julia}
#| echo: true
#| output: false
using LinearSolve
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KLUFactorization()))
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KrylovJL()))
```
```{julia}
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KLUFactorization()))
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KrylovJL()));
```

## Preconditioned Krylov

```{julia}
#| echo: true
#| output: false
using IncompleteLU
function incompletelu(W, du, u, p, t, newW, Plprev, Prprev, solverdata)
    if newW === nothing || newW
        Pl = ilu(convert(AbstractMatrix, W), Ï„ = 50.0)
    else
        Pl = Plprev
    end
    Pl, nothing
end
@time solve(brusselator_sparse,
    KenCarp47(linsolve = KrylovJL(), precs = incompletelu,
        concrete_jac = true));
```
```{julia}
@time solve(brusselator_sparse,
    KenCarp47(linsolve = KrylovJL(), precs = incompletelu,
        concrete_jac = true));
```

---

## Preconditioner options
Full list at https://docs.sciml.ai/LinearSolve/stable/basics/Preconditioners/#Curated-List-of-Pre-Defined-Preconditioners
* `LinearSolve.ComposePreconditioner(p1, p2)` 
* `LinearSolve.InvPreconditioner(p)`
* `IncompleteLU.ilu`
* `AlgebraicMultigrid.jl`
* `PyAMG.jl`
* `ILUZero.jl`

---

## SplitODEProblem and IMEX methods

Sometimes you may have one part of the problem operating at a much faster time
scale than the other. In that case, you can split the problem and use a method
for stiff equations on the fast part and a method for explicit integrators on
the slow part. This is calls an implicit-explicit or IMEX integration. If we
define:

$$
u' = f(u,p,t) + g(u,p,t)
$$

## Example Defining A SplitODEProblem

```{julia}
#| echo: true
u = rand(4, 2)
f1(du, u, p, t) = du .= 2u
f2(du, u, p, t) = du .= 2u
prob = SplitODEProblem(f1, f2, u, (0.0, 1.0))
sol = solve(prob, DE.KenCarp4());
```

NOTE: SplitODEProblems can be solved by standard ODE solvers (by definition, just
putting them back together) but this affords no performance advantage, it's simply
a convenience.

## Special Case: Semilinear ODE Problem

There is a special case for a split ODE problem where $f(u,p,t)$ is linear, i.e.
$f(u,p,t)=Au$. When this occurs, ODE solvers can specialize on being able to solve
that part exactly via the matrix exponential $exp(At)v$, and thus we can use
speical integrators known as Exponential Runge-Kutta Methods. These can be fast
for PDE discretizations that tend of have this form.

```{julia}
#| echo: true
using OrdinaryDiffEqExponentialRK, SciMLOperators
A = [2.0 -1.0; -1.0 2.0]
linnonlin_f1 = MatrixOperator(A)
linnonlin_f2 = (du, u, p, t) -> du .= 1.01 .* u
linnonlin_fun_iip = SplitFunction(linnonlin_f1, linnonlin_f2)
tspan = (0.0, 1.0)
u0 = [0.1, 0.1]
prob = SplitODEProblem(linnonlin_fun_iip, u0, tspan)
sol = solve(prob, ETDRK4(), dt = 1 / 4)
```

## Linear Specialized Methods

Similarly, if $u'=f$ is almost linear, there are specializations. 

* For $u'=Au$, the analytical solution is $u(t) = exp(At)u_0$ which has fast solvers in ExponentialUtilities.jl. 
* For $u'=A(t)u$, there are Magnus methods
* For $u'=A(u)u$, there are Lie group methods

By using matrix exponentials, these methods can have good conservation properties.

## Example Magnus Method Solve

```{julia}
#| echo: true
using OrdinaryDiffEqLinear, SciMLOperators
function update_func(A, u, p, t)
    A[1, 1] = 0
    A[2, 1] = sin(t)
    A[1, 2] = -1
## SplitODEProblem and IMEX methods

Sometimes you may have one part of the problem operating at a much faster time
scale than the other. In that case, you can split the problem and use a method
for stiff equations on the fast part and a method for explicit integrators on
the slow part. This is calls an implicit-explicit or IMEX integration. If we
define:

$$
u' = f(u,p,t) + g(u,p,t)
$$

## Example Defining A SplitODEProblem

```{julia}
#| echo: true
u = rand(4, 2)
f1(du, u, p, t) = du .= 2u
f2(du, u, p, t) = du .= 2u
prob = SplitODEProblem(f1, f2, u, (0.0, 1.0))
sol = solve(prob, DE.KenCarp4());
```

NOTE: SplitODEProblems can be solved by standard ODE solvers (by definition, just
putting them back together) but this affords no performance advantage, it's simply
a convenience.

## Special Case: Semilinear ODE Problem

There is a special case for a split ODE problem where $f(u,p,t)$ is linear, i.e.
$f(u,p,t)=Au$. When this occurs, ODE solvers can specialize on being able to solve
that part exactly via the matrix exponential $exp(At)v$, and thus we can use
speical integrators known as Exponential Runge-Kutta Methods. These can be fast
for PDE discretizations that tend of have this form.

```{julia}
#| echo: true
using OrdinaryDiffEqExponentialRK, SciMLOperators
A = [2.0 -1.0; -1.0 2.0]
linnonlin_f1 = MatrixOperator(A)
linnonlin_f2 = (du, u, p, t) -> du .= 1.01 .* u
linnonlin_fun_iip = SplitFunction(linnonlin_f1, linnonlin_f2)
tspan = (0.0, 1.0)
u0 = [0.1, 0.1]
prob = SplitODEProblem(linnonlin_fun_iip, u0, tspan)
sol = solve(prob, ETDRK4(), dt = 1 / 4)
```

<!-- Local Variables: -->
<!-- mode: markdown -->
<!-- End: -->
