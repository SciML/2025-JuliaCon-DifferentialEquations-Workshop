# Optimizing solves of PDEs

---

## Brusselator
$$
\begin{align}
\frac{\partial U}{\partial t} &= 1 + U^2V - 4.4U + A\nabla^2U + f(x,y,t)\\
\frac{\partial V}{\partial t} &= 3.4U -U^2V - \alpha\nabla^2V \\
\end{align}
$$

```{julia}
#| echo: true
#| output: false
function f(x,y,t)
    if t < 1.1
        return 0
    elseif (x-0.3)^2+(y-0.6)^2 > 0.1^2 
        return 0
    else
        return 5
    end
end
```

$$
\begin{align}
U(x, y, 0) &= 22\cdot (y(1-y))^{3/2} \\
V(x, y, 0) &= 27\cdot (x(1-x))^{3/2} \\
U(x+1,y,t) &= U(x,y,t) \\
V(x,y+1,t) &= V(x,y,t)
\end{align}
$$

---

## Brusselator in Julia

```{julia}
#| echo: true
#| output: false

using OrdinaryDiffEq, LinearAlgebra, SparseArrays

const N = 32
const xyd_brusselator = range(0, stop = 1, length = N)
brusselator_f(x, y, t) = (((x - 0.3)^2 + (y - 0.6)^2) <= 0.1^2) * (t >= 1.1) * 5.0
limit(a, N) = a == N + 1 ? 1 : a == 0 ? N : a
function brusselator_2d_loop(du, u, p, t)
    A, B, alpha, dx = p
    alpha = alpha / dx^2
    @inbounds for I in CartesianIndices((N, N))
        i, j = Tuple(I)
        x, y = xyd_brusselator[I[1]], xyd_brusselator[I[2]]
        ip1, im1, jp1, jm1 = limit(i + 1, N), limit(i - 1, N), limit(j + 1, N),
        limit(j - 1, N)
        du[i, j, 1] = alpha * (u[im1, j, 1] + u[ip1, j, 1] + u[i, jp1, 1] + u[i, jm1, 1] -
                       4u[i, j, 1]) +
                      B + u[i, j, 1]^2 * u[i, j, 2] - (A + 1) * u[i, j, 1] +
                      brusselator_f(x, y, t)
        du[i, j, 2] = alpha * (u[im1, j, 2] + u[ip1, j, 2] + u[i, jp1, 2] + u[i, jm1, 2] -
                       4u[i, j, 2]) +
                      A * u[i, j, 1] - u[i, j, 1]^2 * u[i, j, 2]
    end
end
p = (3.4, 1.0, 10.0, step(xyd_brusselator))

function init_brusselator_2d(xyd)
    N = length(xyd)
    u = zeros(N, N, 2)
    for I in CartesianIndices((N, N))
        x = xyd[I[1]]
        y = xyd[I[2]]
        u[I, 1] = 22 * (y * (1 - y))^(3 / 2)
        u[I, 2] = 27 * (x * (1 - x))^(3 / 2)
    end
    u
end
u0 = init_brusselator_2d(xyd_brusselator)
prob_ode_brusselator_2d = ODEProblem(brusselator_2d_loop, u0, (0.0, 11.5), p)
```

---

## Out of the box performance
```{julia}
#| output: false
solve(prob_ode_brusselator_2d) #compile
solve(prob_ode_brusselator_2d, DefaultODEAlgorithm()) #compile
```
```{julia}
#| echo: true
@time solve(prob_ode_brusselator_2d);
@time solve(prob_ode_brusselator_2d, DefaultODEAlgorithm());
```
---

## Sparse Jacobian
```{julia}
#| echo: true
#| output: false
using SparseConnectivityTracer, ADTypes
detector = TracerSparsityDetector()
du0 = copy(u0)
jac_sparsity = ADTypes.jacobian_sparsity(
    (du, u) -> brusselator_2d_loop(du, u, p, 0.0), du0, u0, detector)
brusselator_f_sparse = ODEFunction(brusselator_2d_loop; jac_prototype = float.(jac_sparsity))
brusselator_sparse = ODEProblem(brusselator_f_sparse, u0, (0.0, 11.5), p)
```

---

## Timing Sparse Jacobian

```{julia}
#| output: false
solve(brusselator_sparse, DefaultODEAlgorithm()) #compile
```
```{julia}
#| echo: true
@time solve(brusselator_sparse, DefaultODEAlgorithm());
```

---

## Specialized Linear Solvers

```{julia}
#| echo: false
using LinearSolve
solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KLUFactorization())) #compile
solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KrylovJL())); #compile
```
```{julia}
#| echo: true
using LinearSolve
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KLUFactorization()))
@time solve(brusselator_sparse, DefaultODEAlgorithm(linsolve=KrylovJL()));
```

## Preconditioned Krylov

```{julia}
#| echo: true
#| output: false
using IncompleteLU
function incompletelu(W, du, u, p, t, newW, Plprev, Prprev, solverdata)
    if newW === nothing || newW
        Pl = ilu(convert(AbstractMatrix, W), Ï„ = 50.0)
    else
        Pl = Plprev
    end
    Pl, nothing
end
```
```{julia}
solve(brusselator_sparse,
    KenCarp47(linsolve = KrylovJL(), precs = incompletelu,
        concrete_jac = true)); #compile
```
```{julia}
#| echo: true
@time solve(brusselator_sparse,
    KenCarp47(linsolve = KrylovJL(), precs = incompletelu,
        concrete_jac = true));
```
<!-- Local Variables: -->
<!-- mode: markdown -->
<!-- End: -->
